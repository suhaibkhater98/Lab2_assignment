#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Post_7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Company")]
	public partial class linkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertWorks_On(Works_On instance);
    partial void UpdateWorks_On(Works_On instance);
    partial void DeleteWorks_On(Works_On instance);
    #endregion
		
		public linkDataContext() : 
				base(global::Post_7.Properties.Settings.Default.CompanyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Works_On> Works_Ons
		{
			get
			{
				return this.GetTable<Works_On>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Dep_Number;
		
		private string _Dep_Name;
		
		private System.Nullable<int> _Manager_ssn;
		
		private System.Nullable<System.DateTime> _Manager_StartDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDep_NumberChanging(int value);
    partial void OnDep_NumberChanged();
    partial void OnDep_NameChanging(string value);
    partial void OnDep_NameChanged();
    partial void OnManager_ssnChanging(System.Nullable<int> value);
    partial void OnManager_ssnChanged();
    partial void OnManager_StartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnManager_StartDateChanged();
    #endregion
		
		public Department()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dep_Number", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Dep_Number
		{
			get
			{
				return this._Dep_Number;
			}
			set
			{
				if ((this._Dep_Number != value))
				{
					this.OnDep_NumberChanging(value);
					this.SendPropertyChanging();
					this._Dep_Number = value;
					this.SendPropertyChanged("Dep_Number");
					this.OnDep_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dep_Name", DbType="VarChar(50)")]
		public string Dep_Name
		{
			get
			{
				return this._Dep_Name;
			}
			set
			{
				if ((this._Dep_Name != value))
				{
					this.OnDep_NameChanging(value);
					this.SendPropertyChanging();
					this._Dep_Name = value;
					this.SendPropertyChanged("Dep_Name");
					this.OnDep_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ssn", DbType="Int")]
		public System.Nullable<int> Manager_ssn
		{
			get
			{
				return this._Manager_ssn;
			}
			set
			{
				if ((this._Manager_ssn != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManager_ssnChanging(value);
					this.SendPropertyChanging();
					this._Manager_ssn = value;
					this.SendPropertyChanged("Manager_ssn");
					this.OnManager_ssnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Manager_StartDate
		{
			get
			{
				return this._Manager_StartDate;
			}
			set
			{
				if ((this._Manager_StartDate != value))
				{
					this.OnManager_StartDateChanging(value);
					this.SendPropertyChanging();
					this._Manager_StartDate = value;
					this.SendPropertyChanged("Manager_StartDate");
					this.OnManager_StartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="Dep_Number", OtherKey="dep_no")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Project", Storage="_Projects", ThisKey="Dep_Number", OtherKey="D_NO")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Employee", ThisKey="Manager_ssn", OtherKey="ssn", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._Manager_ssn = value.ssn;
					}
					else
					{
						this._Manager_ssn = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ssn;
		
		private string _first_name;
		
		private string _last_name;
		
		private System.Nullable<System.DateTime> _birth_date;
		
		private string _gander;
		
		private System.Nullable<double> _salary;
		
		private System.Nullable<int> _dep_no;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Works_On> _Works_Ons;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnssnChanging(int value);
    partial void OnssnChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void Onbirth_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onbirth_dateChanged();
    partial void OnganderChanging(string value);
    partial void OnganderChanged();
    partial void OnsalaryChanging(System.Nullable<double> value);
    partial void OnsalaryChanged();
    partial void Ondep_noChanging(System.Nullable<int> value);
    partial void Ondep_noChanged();
    #endregion
		
		public Employee()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Works_Ons = new EntitySet<Works_On>(new Action<Works_On>(this.attach_Works_Ons), new Action<Works_On>(this.detach_Works_Ons));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssn", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ssn
		{
			get
			{
				return this._ssn;
			}
			set
			{
				if ((this._ssn != value))
				{
					this.OnssnChanging(value);
					this.SendPropertyChanging();
					this._ssn = value;
					this.SendPropertyChanged("ssn");
					this.OnssnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birth_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> birth_date
		{
			get
			{
				return this._birth_date;
			}
			set
			{
				if ((this._birth_date != value))
				{
					this.Onbirth_dateChanging(value);
					this.SendPropertyChanging();
					this._birth_date = value;
					this.SendPropertyChanged("birth_date");
					this.Onbirth_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gander", DbType="Char(10)")]
		public string gander
		{
			get
			{
				return this._gander;
			}
			set
			{
				if ((this._gander != value))
				{
					this.OnganderChanging(value);
					this.SendPropertyChanging();
					this._gander = value;
					this.SendPropertyChanged("gander");
					this.OnganderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Float")]
		public System.Nullable<double> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_no", DbType="Int")]
		public System.Nullable<int> dep_no
		{
			get
			{
				return this._dep_no;
			}
			set
			{
				if ((this._dep_no != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondep_noChanging(value);
					this.SendPropertyChanging();
					this._dep_no = value;
					this.SendPropertyChanged("dep_no");
					this.Ondep_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Departments", ThisKey="ssn", OtherKey="Manager_ssn")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Works_On", Storage="_Works_Ons", ThisKey="ssn", OtherKey="E_SSN")]
		public EntitySet<Works_On> Works_Ons
		{
			get
			{
				return this._Works_Ons;
			}
			set
			{
				this._Works_Ons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="dep_no", OtherKey="Dep_Number", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._dep_no = value.Dep_Number;
					}
					else
					{
						this._dep_no = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Works_Ons(Works_On entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Works_Ons(Works_On entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _P_Number;
		
		private string _P_Name;
		
		private System.Nullable<int> _D_NO;
		
		private EntitySet<Works_On> _Works_Ons;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_NumberChanging(int value);
    partial void OnP_NumberChanged();
    partial void OnP_NameChanging(string value);
    partial void OnP_NameChanged();
    partial void OnD_NOChanging(System.Nullable<int> value);
    partial void OnD_NOChanged();
    #endregion
		
		public Project()
		{
			this._Works_Ons = new EntitySet<Works_On>(new Action<Works_On>(this.attach_Works_Ons), new Action<Works_On>(this.detach_Works_Ons));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int P_Number
		{
			get
			{
				return this._P_Number;
			}
			set
			{
				if ((this._P_Number != value))
				{
					this.OnP_NumberChanging(value);
					this.SendPropertyChanging();
					this._P_Number = value;
					this.SendPropertyChanged("P_Number");
					this.OnP_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Name", DbType="NVarChar(50)")]
		public string P_Name
		{
			get
			{
				return this._P_Name;
			}
			set
			{
				if ((this._P_Name != value))
				{
					this.OnP_NameChanging(value);
					this.SendPropertyChanging();
					this._P_Name = value;
					this.SendPropertyChanged("P_Name");
					this.OnP_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D_NO", DbType="Int")]
		public System.Nullable<int> D_NO
		{
			get
			{
				return this._D_NO;
			}
			set
			{
				if ((this._D_NO != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnD_NOChanging(value);
					this.SendPropertyChanging();
					this._D_NO = value;
					this.SendPropertyChanged("D_NO");
					this.OnD_NOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Works_On", Storage="_Works_Ons", ThisKey="P_Number", OtherKey="P_No")]
		public EntitySet<Works_On> Works_Ons
		{
			get
			{
				return this._Works_Ons;
			}
			set
			{
				this._Works_Ons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Project", Storage="_Department", ThisKey="D_NO", OtherKey="Dep_Number", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._D_NO = value.Dep_Number;
					}
					else
					{
						this._D_NO = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works_Ons(Works_On entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Works_Ons(Works_On entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Works_On")]
	public partial class Works_On : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _E_SSN;
		
		private int _P_No;
		
		private System.Nullable<double> _Hours;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_SSNChanging(int value);
    partial void OnE_SSNChanged();
    partial void OnP_NoChanging(int value);
    partial void OnP_NoChanged();
    partial void OnHoursChanging(System.Nullable<double> value);
    partial void OnHoursChanged();
    #endregion
		
		public Works_On()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_SSN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int E_SSN
		{
			get
			{
				return this._E_SSN;
			}
			set
			{
				if ((this._E_SSN != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnE_SSNChanging(value);
					this.SendPropertyChanging();
					this._E_SSN = value;
					this.SendPropertyChanged("E_SSN");
					this.OnE_SSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int P_No
		{
			get
			{
				return this._P_No;
			}
			set
			{
				if ((this._P_No != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnP_NoChanging(value);
					this.SendPropertyChanging();
					this._P_No = value;
					this.SendPropertyChanged("P_No");
					this.OnP_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hours", DbType="Float")]
		public System.Nullable<double> Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Works_On", Storage="_Employee", ThisKey="E_SSN", OtherKey="ssn", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Works_Ons.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Works_Ons.Add(this);
						this._E_SSN = value.ssn;
					}
					else
					{
						this._E_SSN = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Works_On", Storage="_Project", ThisKey="P_No", OtherKey="P_Number", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Works_Ons.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Works_Ons.Add(this);
						this._P_No = value.P_Number;
					}
					else
					{
						this._P_No = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
